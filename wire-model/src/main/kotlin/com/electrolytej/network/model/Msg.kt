// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.electrolytej.network.model.Msg in Profile1.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package com.electrolytej.network.model

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

/**
 * option java_multiple_files = true;
 */
public class Msg(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val foo: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.electrolytej.network.model.SecondMsg#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val blah: SecondMsg? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Msg, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Msg) return false
    if (unknownFields != other.unknownFields) return false
    if (foo != other.foo) return false
    if (blah != other.blah) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + foo.hashCode()
      result = result * 37 + (blah?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """foo=${sanitize(foo)}"""
    if (blah != null) result += """blah=$blah"""
    return result.joinToString(prefix = "Msg{", separator = ", ", postfix = "}")
  }

  public fun copy(
    foo: String = this.foo,
    blah: SecondMsg? = this.blah,
    unknownFields: ByteString = this.unknownFields,
  ): Msg = Msg(foo, blah, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Msg> = object : ProtoAdapter<Msg>(
      FieldEncoding.LENGTH_DELIMITED, 
      Msg::class, 
      "type.googleapis.com/com.electrolytej.network.model.Msg", 
      PROTO_3, 
      null, 
      "Profile1.proto"
    ) {
      override fun encodedSize(`value`: Msg): Int {
        var size = value.unknownFields.size
        if (value.foo != "") {
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.foo)
        }
        if (value.blah != null) {
          size += SecondMsg.ADAPTER.encodedSizeWithTag(2, value.blah)
        }
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Msg) {
        if (value.foo != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.foo)
        }
        if (value.blah != null) {
          SecondMsg.ADAPTER.encodeWithTag(writer, 2, value.blah)
        }
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Msg) {
        writer.writeBytes(value.unknownFields)
        if (value.blah != null) {
          SecondMsg.ADAPTER.encodeWithTag(writer, 2, value.blah)
        }
        if (value.foo != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.foo)
        }
      }

      override fun decode(reader: ProtoReader): Msg {
        var foo: String = ""
        var blah: SecondMsg? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> foo = ProtoAdapter.STRING.decode(reader)
            2 -> blah = SecondMsg.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Msg(
          foo = foo,
          blah = blah,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Msg): Msg = value.copy(
        blah = value.blah?.let(SecondMsg.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
