// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.electrolytej.network.model.Msg in Profile.proto
import Wire

/**
 * option java_multiple_files = true;
 */
public struct Msg {

    public var foo: String
    public var blah: SecondMsg?
    public var unknownFields: UnknownFields = .init()

    public init(foo: String, configure: (inout Self) -> Swift.Void = { _ in }) {
        self.foo = foo
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension Msg : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension Msg : Hashable {
}
#endif

extension Msg : Sendable {
}

extension Msg : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/com.electrolytej.network.model.Msg"
    }

}

extension Msg : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var foo: String = ""
        var blah: SecondMsg? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: foo = try protoReader.decode(String.self)
            case 2: blah = try protoReader.decode(SecondMsg.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.foo = foo
        self.blah = blah
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.foo)
        try protoWriter.encode(tag: 2, value: self.blah)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension Msg : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.foo = try container.decode(String.self, forKey: "foo")
        self.blah = try container.decodeIfPresent(SecondMsg.self, forKey: "blah")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.foo.isEmpty {
            try container.encode(self.foo, forKey: "foo")
        }
        try container.encodeIfPresent(self.blah, forKey: "blah")
    }

}
#endif
