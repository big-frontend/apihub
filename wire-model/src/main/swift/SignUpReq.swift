// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.electrolytej.network.model.SignUpReq in 17111111.proto
import Wire

public struct SignUpReq {

    public var id: Int32
    public var password: String
    public var verificationCode: Int32
    public var unknownFields: UnknownFields = .init()

    public init(
        id: Int32,
        password: String,
        verificationCode: Int32
    ) {
        self.id = id
        self.password = password
        self.verificationCode = verificationCode
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension SignUpReq : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SignUpReq : Hashable {
}
#endif

extension SignUpReq : Sendable {
}

extension SignUpReq : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/com.electrolytej.network.model.SignUpReq"
    }

}

extension SignUpReq : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var id: Int32 = 0
        var password: String = ""
        var verificationCode: Int32 = 0

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: id = try protoReader.decode(Int32.self, encoding: .variable)
            case 2: password = try protoReader.decode(String.self)
            case 3: verificationCode = try protoReader.decode(Int32.self, encoding: .variable)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.id = id
        self.password = password
        self.verificationCode = verificationCode
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.id, encoding: .variable)
        try protoWriter.encode(tag: 2, value: self.password)
        try protoWriter.encode(tag: 3, value: self.verificationCode, encoding: .variable)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension SignUpReq : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.id = try container.decode(Int32.self, forKey: "id")
        self.password = try container.decode(String.self, forKey: "password")
        self.verificationCode = try container.decode(Int32.self, forKey: "verificationCode")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || self.id != 0 {
            try container.encode(self.id, forKey: "id")
        }
        if includeDefaults || !self.password.isEmpty {
            try container.encode(self.password, forKey: "password")
        }
        if includeDefaults || self.verificationCode != 0 {
            try container.encode(self.verificationCode, forKey: "verificationCode")
        }
    }

}
#endif
